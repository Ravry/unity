#pragma kernel CSMain

RWStructuredBuffer<float> VoxelBuffer;

uint3 GridSize;
int3 BaseVec;

float RandomValue(uint seed)
{
    seed = (seed * 1664525u) + 1013904223u; 
    return (float)(seed >> 16) / 65536.0f;  
}

float3 GradientVector(uint ix, uint iy, uint iz)
{
    uint seed = ix * 73856093u ^ iy * 19349663u ^ iz * 40006501u;
    
    float theta = RandomValue(seed) * (3.14159265359 * 2.0);
    float phi = acos(RandomValue(seed) * 2.0 - 1.0);
    
    float x = sin(phi) * cos(theta);
    float y = sin(phi) * sin(theta);
    float z = cos(phi);
    
    return normalize(float3(x, y, z));
}

float Fade(float t)
{
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float Noise3D(float x, float y, float z)
{
    int x0 = floor(x);
    int x1 = x0 + 1;
    int y0 = floor(y);
    int y1 = y0 + 1;
    int z0 = floor(z);
    int z1 = z0 + 1;

    float3 g000 = GradientVector(x0, y0, z0);
    float3 g100 = GradientVector(x1, y0, z0);
    float3 g001 = GradientVector(x0, y0, z1);
    float3 g101 = GradientVector(x1, y0, z1);

    float3 g010 = GradientVector(x0, y1, z0);
    float3 g110 = GradientVector(x1, y1, z0);
    float3 g011 = GradientVector(x0, y1, z1);
    float3 g111 = GradientVector(x1, y1, z1);

    float3 d000 = float3(x - x0, y - y0, z - z0);
    float3 d100 = float3(x - x1, y - y0, z - z0);
    float3 d001 = float3(x - x0, y - y0, z - z1);
    float3 d101 = float3(x - x1, y - y0, z - z1);

    float3 d010 = float3(x - x0, y - y1, z - z0);
    float3 d110 = float3(x - x1, y - y1, z - z0);
    float3 d011 = float3(x - x0, y - y1, z - z1);
    float3 d111 = float3(x - x1, y - y1, z - z1);

    float dot000 = dot(g000, d000);
    float dot100 = dot(g100, d100);
    float dot001 = dot(g001, d001);
    float dot101 = dot(g101, d101);

    float dot010 = dot(g010, d010);
    float dot110 = dot(g110, d110);
    float dot011 = dot(g011, d011);
    float dot111 = dot(g111, d111);

    float u = Fade(x - x0);
    float v = Fade(y - y0);
    float w = Fade(z - z0);

    float nx0 = lerp(dot000, dot100, u);
    float nx1 = lerp(dot001, dot101, u);
    float nx2 = lerp(dot010, dot110, u);
    float nx3 = lerp(dot011, dot111, u);

    float nz0 = lerp(nx0, nx1, w);
    float nz1 = lerp(nx2, nx3, w);

    float ny0 = lerp(nz0, nz1, v);
    ny0 += 1.0f;
    ny0 /= 2.0f;
    return ny0;
}


[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= GridSize.x || id.y >= GridSize.y || id.z >= GridSize.z) return;
    uint index = id.z * GridSize.x * GridSize.y + id.y * GridSize.x + id.x;
    VoxelBuffer[index] = Noise3D(BaseVec.x + id.x * .2f, BaseVec.y + id.y * .2f, BaseVec.z + id.z * .2f);
}